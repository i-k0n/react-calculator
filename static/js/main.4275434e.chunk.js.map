{"version":3,"sources":["components/Calculator/Calculator.js","components/Calculator/Screen/ResultScreen/ResultScreen.js","components/Calculator/Screen/ComputationScreen/ComputationScreen.js","components/Calculator/Screen/Screen.js","components/Calculator/Keypad/KeypadRow/KeypadRow.js","components/Calculator/Keypad/Button.js","components/Calculator/Keypad/Keypad.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","equation","setEquation","result","setResult","firstValue","setFirstValue","operator","setOperator","secondValue","setSecondValue","previousKey","setPreviousKey","onButtonPress","e","equationTemp","pressedButton","target","innerHTML","key","action","getAttribute","keyContent","textContent","calculator","document","querySelector","clear","isDecimal","charAt","length","slice","console","log","evalResult","eval","Number","isInteger","toFixed","error","trim","substr","calculate","n1","n2","parseFloat","className","ResultScreen","props","children","ComputationScreen","Screen","KeypadRow","Button","classes","type","push","join","onClick","data-action","Keypad","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4275434e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Screen from './Screen/Screen'\r\nimport Keypad from './Keypad/Keypad'\r\n\r\nfunction Calculator() {\r\n\r\n    const [equation, setEquation] = useState('');\r\n    const [result, setResult] = useState('0');\r\n    // const [display, setDisplay] = useState('0');\r\n    const [firstValue, setFirstValue] = useState('')\r\n    const [operator, setOperator] = useState('')\r\n    const [secondValue, setSecondValue] = useState('')\r\n    const [previousKey, setPreviousKey] = useState('')\r\n\r\n    const onButtonPress = e => {\r\n      let equationTemp = equation;\r\n      const pressedButton = e.target.innerHTML;\r\n      const key = e.target;\r\n      const action = e.target.getAttribute('data-action');\r\n      const keyContent = key.textContent;\r\n      // const displayedNum = display.textContent;\r\n      const calculator = document.querySelector('.calculator')\r\n      // const previousKeyType = calculator.dataset.previousKeyType;\r\n\r\n      // console.log(keyContent)\r\n      // console.log(e.target.getAttribute('data-action'))\r\n      // if (!action) {\r\n      //   // console.log('number key!')\r\n        \r\n      //   if (result === '0' || previousKey === 'operator') {\r\n      //     setResult(keyContent);\r\n      //   } else { \r\n      //     setResult(result + keyContent);\r\n      //   }\r\n\r\n      //   setPreviousKey('number');\r\n      //   console.log(\"firstValue: \", firstValue, \"operator: \", operator, \"secondValue: \", secondValue, \"previousKey: \", previousKey)\r\n      // }\r\n\r\n      // document.querySelector('.keypad').querySelectorAll('.btn').forEach(k => k.classList.remove('is-depressed'))\r\n      \r\n\r\n      \r\n\r\n      // if (\r\n      //   action === 'add' ||\r\n      //   action === 'subtract' ||\r\n      //   action === 'multiply' ||\r\n      //   action === 'divide' ||\r\n      //   action === 'percentage'\r\n      //   ) {\r\n      //     // console.log('operator key!')\r\n          \r\n      //     // const firstValue = calculator.dataset.firstValue;\r\n      //     // console.log('firstValue: ', firstValue);\r\n      //     // const operator = calculator.dataset.operator;\r\n      //     // console.log('operator: ', operator);\r\n      //     // setSecondValue(result);\r\n      //     // console.log('secondValue: ', secondValue);\r\n\r\n      //     if (firstValue && operator && previousKey !== 'operator') {\r\n      //       const calcValue = calculate(firstValue, operator, secondValue)\r\n      //       console.log('calcValue: ', calcValue);\r\n      //       setResult(calcValue)\r\n\r\n      //       // update calculated value as firstValue\r\n      //       setFirstValue(calcValue)\r\n      //     } else if (firstValue) {\r\n      //       // if there are no calculations, set result as the firstValue\r\n      //       setResult(firstValue);\r\n      //     }\r\n\r\n      //     key.classList.add('is-depressed')\r\n\r\n      //     // Add custom attribute\r\n      //     setPreviousKey('operator');\r\n      //     setFirstValue(result)\r\n      //     setOperator(action);\r\n      //     console.log(\"firstValue: \", firstValue, \"operator: \", operator, \"secondValue: \", secondValue, \"previousKey: \", previousKey)\r\n      // }\r\n\r\n      // if (action === 'decimal') {\r\n      //   console.log('decimal key!')\r\n        \r\n      //   if (!result.includes('.')) {\r\n      //     setResult(result + '.')\r\n      //   } else if (previousKey === 'operator') {\r\n      //     setResult('0.')\r\n      //   }\r\n\r\n      //   setPreviousKey('decimal');\r\n      //   console.log(\"firstValue: \", firstValue, \"operator: \", operator, \"secondValue: \", secondValue, \"previousKey: \", previousKey)\r\n      // }\r\n\r\n      // if (action === 'clear') {\r\n      //   console.log('clear key!')\r\n      //   return clear()\r\n      // }\r\n\r\n      // if (action === 'calculate') {\r\n      //   console.log('equal key!')\r\n      //   // let firstValue = calculator.dataset.firstValue;\r\n      //   // const operator = calculator.dataset.operator;\r\n      //   console.log(result)\r\n      //   setSecondValue(result);\r\n      //   console.log(secondValue)\r\n\r\n      //   if (firstValue) {\r\n      //     if (previousKey === 'calculate') {\r\n      //       setResult(firstValue)\r\n      //       setSecondValue(calculator.dataset.modValue);\r\n      //     }\r\n      //     setResult(calculate(firstValue, operator, secondValue))\r\n      //   }\r\n      //   calculator.dataset.modValue = secondValue;\r\n      //   setPreviousKey('calculate');\r\n      //   console.log(\"firstValue: \", firstValue, \"operator: \", operator, \"secondValue: \", secondValue, \"previousKey: \", previousKey)\r\n      // }\r\n\r\n      // handle clear\r\n      if (pressedButton === 'C') {\r\n        setPreviousKey('clear')\r\n        return clear();\r\n      }\r\n      // handle numbers\r\n      else if (!action) {\r\n        equationTemp += pressedButton;\r\n        setPreviousKey('number')\r\n      }\r\n      // handle decimals\r\n      else if (action === 'decimal') {\r\n        // check if last key was a decimal\r\n        const isDecimal = equationTemp.charAt(equationTemp.length - 1) === '.';\r\n        // console.log(isDecimal)\r\n        if (!isDecimal) {\r\n          if (equationTemp === '') {\r\n            equationTemp += '0.';  \r\n          } else {\r\n            equationTemp += '.';\r\n          }\r\n        } else if (previousKey === 'operator') {\r\n          equationTemp += '0.';\r\n        }\r\n    \r\n        setPreviousKey('decimal');\r\n      }\r\n      // handle operations\r\n      else if (action === 'add' ||\r\n        action === 'subtract' ||\r\n        action === 'multiply' ||\r\n        action === 'divide' ||\r\n        action === 'percentage') {\r\n          if (previousKey !== 'operator') {\r\n            equationTemp += ' ' + pressedButton + ' ';\r\n          } else {\r\n            equationTemp = equationTemp.slice(0, -3) + ' ' + pressedButton + ' ';\r\n            console.log(\"equationTemp: \", equationTemp)\r\n          }\r\n          setPreviousKey('operator')\r\n      }\r\n      // handle equals\r\n      else if (action === 'calculate') {\r\n        try {\r\n          \r\n          const evalResult = eval(equationTemp);\r\n          const result = Number.isInteger(evalResult)? evalResult : evalResult.toFixed(2);\r\n          setResult(result);\r\n        } catch (error) {\r\n          setResult('ERROR');\r\n        }\r\n        setPreviousKey('calculate')\r\n      }\r\n      // handle delete\r\n      else {\r\n        equationTemp = equationTemp.trim();\r\n        equationTemp = equationTemp.substr(0, equationTemp.length - 1);\r\n      }\r\n                  \r\n      setEquation(equationTemp);\r\n    }\r\n\r\n    const calculate = (n1, operator, n2) => {\r\n      let result = ''\r\n\r\n      if (operator === 'add') {\r\n        result = parseFloat(n1) + parseFloat(n2)\r\n      } else if (operator === 'subtract') {\r\n        result = parseFloat(n1) - parseFloat(n2)\r\n      } else if (operator === 'multiply') {\r\n        result = parseFloat(n1) * parseFloat(n2)\r\n      } else if (operator === 'divide') {\r\n        result = parseFloat(n1) / parseFloat(n2)\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    const clear = () => {\r\n      setResult('0')\r\n      setFirstValue('')\r\n      setOperator('')\r\n      setSecondValue('')\r\n      setPreviousKey('clear');\r\n      setEquation('')\r\n    }\r\n\r\n    return (\r\n      <main className=\"calculator\">\r\n        <Screen equation={equation} result={result} />\r\n        <Keypad onButtonPress={onButtonPress} />\r\n      </main>\r\n    )\r\n}\r\n\r\nexport default Calculator\r\n","import React from 'react'\r\n\r\nfunction ResultScreen(props) {\r\n    return (\r\n        <div className=\"result-screen\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultScreen\r\n","import React from 'react'\r\n\r\nfunction ComputationScreen(props) {\r\n    return (\r\n        <div className=\"computation-screen\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComputationScreen\r\n","import React from 'react'\r\nimport ResultScreen from './ResultScreen/ResultScreen'\r\nimport ComputationScreen from './ComputationScreen/ComputationScreen'\r\n\r\n\r\nfunction Screen(props) {\r\n    return (\r\n        <section className=\"screen\">\r\n            <ResultScreen>{props.result}</ResultScreen>\r\n            <ComputationScreen>{props.equation}</ComputationScreen>\r\n        </section>\r\n        \r\n    )\r\n}\r\n\r\nexport default Screen\r\n","import React from 'react'\r\n\r\nfunction KeypadRow(props) {\r\n    return (\r\n        <div className=\"keypad__row\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KeypadRow","import React from 'react'\r\n\r\nfunction Button(props) {\r\n\r\n    const classes = ['btn'];\r\n\r\n    if (typeof props !== 'undefined' && typeof props.type !== 'undefined') {\r\n        classes.push('btn--' + props.type);\r\n    }\r\n\r\n    return (\r\n        <button \r\n            className={classes.join(' ')} \r\n            onClick={props.onButtonPress} \r\n            data-action={props.action}\r\n        >\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport KeypadRow from './KeypadRow/KeypadRow'\r\nimport Button from './Button'\r\n\r\nfunction Keypad(props) {\r\n    return (\r\n      <section className=\"keypad\">\r\n        <KeypadRow>\r\n          <Button onButtonPress={props.onButtonPress} action=\"clear\">C</Button>\r\n          <Button onButtonPress={props.onButtonPress} action=\"delete\">&larr;</Button>\r\n          <Button onButtonPress={props.onButtonPress} action=\"percentage\">%</Button>\r\n          <Button onButtonPress={props.onButtonPress} action=\"divide\">/</Button>\r\n        </KeypadRow>\r\n\r\n        <KeypadRow>\r\n          <Button onButtonPress={props.onButtonPress}>9</Button>\r\n          <Button onButtonPress={props.onButtonPress}>8</Button>\r\n          <Button onButtonPress={props.onButtonPress}>7</Button>\r\n          <Button onButtonPress={props.onButtonPress} action=\"multiply\">*</Button>\r\n        </KeypadRow>\r\n\r\n        <KeypadRow>\r\n          <Button onButtonPress={props.onButtonPress}>6</Button>\r\n          <Button onButtonPress={props.onButtonPress}>5</Button>\r\n          <Button onButtonPress={props.onButtonPress}>4</Button>\r\n          <Button onButtonPress={props.onButtonPress} action=\"subtract\">-</Button>\r\n        </KeypadRow>\r\n\r\n        <KeypadRow>\r\n          <Button onButtonPress={props.onButtonPress}>3</Button>\r\n          <Button onButtonPress={props.onButtonPress}>2</Button>\r\n          <Button onButtonPress={props.onButtonPress}>1</Button>\r\n          <Button onButtonPress={props.onButtonPress} action=\"add\">+</Button>\r\n        </KeypadRow>\r\n\r\n        <KeypadRow>\r\n          <Button onButtonPress={props.onButtonPress}>0</Button>\r\n          <Button onButtonPress={props.onButtonPress} action=\"decimal\">.</Button>\r\n          <Button onButtonPress={props.onButtonPress} type=\"large\" action=\"calculate\">=</Button>\r\n        </KeypadRow>\r\n      </section>\r\n    );\r\n}\r\n\r\nexport default Keypad\r\n","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator/Calculator';\n\n// click a number\n// clicking another number adds to that number\n// if an operator is selected, switch to second number\n// keep adding to second number\n// if equals is pressed, check operator\n// then perform math and display result\n\n\n\nfunction App() {\n\n  \n\n  return (\n    <div className=\"calculator-container\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}